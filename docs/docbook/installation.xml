<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en">

  <title>Installation</title>

  <sect1>

    <title>Quick installation</title>

    <para> You need Java 1.5 or newer installed (available from 
    <ulink>http://java.sun.com</ulink>).</para>

    <orderedlist>

      <listitem>

        <para>CMView uses <ulink url="http://pymol.sourceforge.net/">
        PyMol</ulink> for 3D molecular visualization. To use this 
        feature you need to have PyMol installed. For the latest 
        features and because PyMol is great software, we recommend to 
        get a <ulink url="http://www.pymol.org/funding.html">sponsor 
        version</ulink>. However, a free version (0.99) can be 
        downloaded from <ulink url="http://delsci.com/rel/099/">
        here</ulink> or can be compiled from source code.</para>

      </listitem>

      <listitem>

        <para>Download the current version of CMView from 
        <ulink url="download.html">downloads</ulink>.</para>

      </listitem>

      <listitem>

        <para>Unzip the archive. A directory 
        <filename>cmview-currentversion</filename> will be 
        created.</para>

      </listitem>

      <listitem>

        <para>Edit the <filename>cmview.cfg</filename> file in 
        <filename>cmview-currentversion</filename> and set the variable 
        PYMOL_EXECUTABLE to point to your local PyMol executable (see 
        example below). Note that you need to use forward slashes (even 
        on Windows) for the path and no quotes.</para>

        <programlisting>PYMOL_EXECUTABLE=C:/Program Files/PyMol/pymol.exe</programlisting>
      </listitem>

      <listitem>

        <para>To run the program:</para>

        <itemizedlist>

          <listitem>

            <para>In Unix and MacOSX: run <filename>
            cmview.sh</filename></para>

          </listitem>

          <listitem>

            <para>In Windows: run <filename>cmview.bat</filename></para>

          </listitem>

        </itemizedlist>

      </listitem>

    </orderedlist>

  </sect1>

  <sect1>

    <title>The details</title>

    <sect2>

      <title>External libraries</title>

      <para>The CMView application itself is packaged in a single java 
      archive (.jar) file: <filename>CMView.jar</filename>. It uses a 
      number of external libraries which for convenience we include in 
      the downloadable zip file. These are:</para>

      <orderedlist>

        <listitem>

          <para>From <ulink url="http://commons.apache.org/">Apache 
          commons</ulink>: <filename>commons-codec-1.3.jar</filename>, 
          <filename>ws-commons-util-1.0.1.jar</filename>, <filename>
          xmlrpc-client-3.0.jar</filename>, <filename>
          xmlrpc-common-3.0.jar</filename></para>

        </listitem>

        <listitem>

          <para>From <ulink url="https://java3d.dev.java.net/">
          Java3D</ulink> 1.5.1: <filename>vecmath.jar</filename></para>

        </listitem>

        <listitem>

          <para>From the <ulink url="http://jung.sourceforge.net/">
          JUNG</ulink> project: <filename>
          collections-generic-4.01.jar</filename>, <filename>
          jung-api-2.0-alpha2.jar</filename>, <filename>
          jung-graph-impl-2.0-alpha2.jar</filename></para>

        </listitem>

        <listitem>

          <para>
          <ulink url="http://jaligner.sourceforge.net/">Jaligner</ulink>: 
          <filename>jaligner.jar</filename></para>

        </listitem>

        <listitem>

          <para>Java 
          <ulink url="http://www.urbanophile.com/arenn/hacking/download.html">
          getopt</ulink>: <filename>
          java-getopt-1.0.13.jar</filename></para>

        </listitem>

      </orderedlist>

    </sect2>

    <sect2>

      <title>Setting JVM memory</title>

      <para>What the shell/batch scripts do is just running the jar 
      with:</para>

      <programlisting>java -Xmx256m -jar CMView.jar</programlisting>
      <para>We set the JVM memory to 256MB as the contact map 
      generation requires quite a lot of memory. For very big protein 
      chains (&gt;400 aminoacids) using the ALL atom model you may need 
      even more: set it to 512MB to be on the safe side.</para>

    </sect2>

    <sect2>

      <title>Secondary Structure and DSSP</title>

      <para>By default CMView will get the secondary structure 
      annotation from the PDB file if present. For getting a more 
      consistent secondary structure annotation and to have it in those 
      cases when it is missing in the file, CMView can use the external 
      program DSSP to assign secondary structure. You need to obtain 
      your own licensed copy of DSSP. A free version for non-commercial 
      use can be found <ulink url="http://swift.cmbi.ru.nl/gv/dssp/">
      here</ulink>. To enable using DSSP in CMView you need to set the 
      parameter DSSP_EXECUTABLE in <filename>cmview.cfg</filename> to 
      point to your dssp executable. For example:</para>

      <programlisting>DSSP_EXECUTABLE=C:/Program Files/dssp/dssp.exe</programlisting>
    </sect2>

    <sect2>

      <title>Config file</title>

      <para>There are other configurable parameters that can be set in 
      the config file <filename>cmview.cfg</filename>. Please refer to 
      the <ulink url="manual.html">user&apos;s manual</ulink> for a 
      full description.</para>

      <para>The configuration file will be read first from the 
      directory where you installed CMView (system-wide config). 
      Per-user customisation is also possible by using a <filename>
      cmview.cfg</filename> file placed in your home directory (in 
      Windows that would be something like <filename>c:\Documents and 
      Settings\yourusername</filename>). Settings in the user 
      configuration file will take precedence over those in the 
      system-wide one.</para>

    </sect2>

  </sect1>

</article>

